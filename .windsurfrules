# Coding Guidelines

## User / Developer Chat Interactions
- Never output preambles or summaries of changes

## Coding Standards
- Use snake_case for variable names
- Class, function and variable names should be descriptive and meaningful
- Avoid adding internal comments
- Add and update python docstrings
- When asked to create commit messages, use conventional commit format with a bulleted list of changes as the description.
- Always ask for or run the following Git command to get the changes for an accurate commit message & description: `git --no-pager diff --staged`

## Error Handling
- Implement retry mechanisms with exponential backoff for failed requests to Google and Amplitude
- Handle SSE connection errors and disconnects to Optimizely Agent
- Log errors with relevant context for debugging and analytics

## Performance Optimization
- Utilize asynchronous programming to handle high volumes of SSE events and analytics requests
- Implement caching mechanisms to reduce database load and improve response times
- Use profiling and monitoring tools to identify bottlenecks and optimize performance

## Security
- Validate and sanitize incoming SSE event data to prevent security vulnerabilities
- Implement authentication and authorization mechanisms for Google and Amplitude APIs
- Watch for the User to accidentally expose sensitive data in code and notify in the chat using emojis for attention
- Limit communication between containers to the necessary minimum

## Scalability
- Design the app as a side car container to Optimizely Agent 
- Consider that the pod will scale horizontally to handle increased traffic and event volumes
- Implement queueing mechanisms to handle event bursts and prevent data loss

## Monitoring and Logging
- Implement logging mechanisms to track errors, warnings, and information events to standard output
- Use logging and monitoring data to inform optimization and debugging efforts

## End to End Testing
1. Assume I have already started Optimizely Agent in my own terminal session
2. Run `python main.py` to start the application in terminal session #1
3. Run `python decide_testing.py` in terminal session #2 to send events and wait for it to finish
4. Read the number of lines in `user_ids.txt` by running `(Get-Content user_ids.txt | Measure-Object -Line).Lines`
5. A positive test is when we have 101 rows in `user_ids.txt`
6. No need to remove the `user_ids.txt` file as the `decide_testing.py` script deletes it
7. Monitor the terminal session two for the `decide_testing` script to finish
8. Look for errors in terminal session #1
9. Use `Stop-Process -Id (Get-Process -Name python).Id -Force` to clean up